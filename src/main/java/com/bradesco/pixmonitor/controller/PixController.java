package com.bradesco.pixmonitor.controller;

import com.bradesco.pixmonitor.model.Conta;
import com.bradesco.pixmonitor.model.ScoreConfianca;
import com.bradesco.pixmonitor.model.TransacaoPix;
import com.bradesco.pixmonitor.service.BancoDadosService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/pix")
@CrossOrigin(origins = "*")
public class PixController {

    private static final Logger logger = LoggerFactory.getLogger(PixController.class);

    @Autowired
    private BancoDadosService bancoDadosService;

    /**
     * An√°lise de PIX ANTES da transa√ß√£o ser realizada
     * Esta an√°lise verifica o score e retorna se a transa√ß√£o deve ser bloqueada
     * L√ìGICA: QUANTO MENOR O SCORE, MAIOR O RISCO!
     */
    @PostMapping("/analisar-pre-transacao")
    public ResponseEntity<Map<String, Object>> analisarPreTransacao(@RequestBody Map<String, Object> dadosTransacao) {
        Map<String, Object> resultado = new HashMap<>();
        
        try {
            logger.info("üîç INICIANDO AN√ÅLISE PR√â-TRANSA√á√ÉO PIX");
            
            // Extrair dados da requisi√ß√£o
            String chavePix = (String) dadosTransacao.get("chavePix");
            String valorStr = (String) dadosTransacao.get("valor");
            String descricao = (String) dadosTransacao.getOrDefault("descricao", "");
            String contaOrigemIdStr = (String) dadosTransacao.get("contaOrigemId");
            
            BigDecimal valor = new BigDecimal(valorStr);
            Long contaOrigemId = Long.parseLong(contaOrigemIdStr);
            
            logger.info("üìã Dados da transa√ß√£o: ChavePix={}, Valor=R${}, ContaOrigem={}", 
                       chavePix, valor, contaOrigemId);
            
            // Buscar conta origem
            Optional<Conta> contaOrigemOpt = bancoDadosService.buscarContaPorId(contaOrigemId);
            if (contaOrigemOpt.isEmpty()) {
                resultado.put("erro", "Conta origem n√£o encontrada");
                return ResponseEntity.badRequest().body(resultado);
            }
            
            Conta contaOrigem = contaOrigemOpt.get();
            
            // =============================================
            // AN√ÅLISE CR√çTICA DO SCORE (ANTES DA TRANSA√á√ÉO!)
            // =============================================
            
            // Buscar score da conta origem
            Optional<ScoreConfianca> scoreOpt = bancoDadosService.buscarScorePorCliente(contaOrigem.getCliente().getId());
            
            Integer scoreAtual;
            if (scoreOpt.isEmpty()) {
                // Se n√£o tem score, criar um score inicial m√©dio
                scoreAtual = 70; // Score m√©dio inicial
                logger.info("‚ö†Ô∏è Cliente sem score definido. Usando score inicial: {}", scoreAtual);
            } else {
                scoreAtual = scoreOpt.get().getScore();
            }
            
            // ‚ö†Ô∏è IMPORTANTE: QUANTO MENOR O SCORE, MAIOR O RISCO!
            final int SCORE_CRITICO = 30;    // ‚â§ 30 = BLOQUEIO IMEDIATO
            final int SCORE_ALTO = 50;       // ‚â§ 50 = TRANSA√á√ÉO SUSPEITA  
            final int SCORE_MEDIO = 70;      // ‚â§ 70 = MONITORAMENTO ESPECIAL
            
            String nivelRisco = determinarNivelRisco(scoreAtual);
            boolean transacaoBloqueada = false;
            boolean transacaoSuspeita = false;
            boolean requerAprovacao = false;
            String motivoBloqueio = "";
            
            logger.info("üìä AN√ÅLISE DE SCORE DETALHADA:");
            logger.info("   üë§ Cliente: {}", contaOrigem.getCliente().getNomeCompleto());
            logger.info("   üî¢ Score atual: {}/100", scoreAtual);
            logger.info("   ‚ö° N√≠vel de risco: {}", nivelRisco);
            
            // =============================================
            // üö´ RISCO CR√çTICO (Score ‚â§ 30) - BLOQUEAR
            // =============================================
            if (scoreAtual <= SCORE_CRITICO) {
                transacaoBloqueada = true;
                motivoBloqueio = String.format(
                    "SCORE CR√çTICO DETECTADO: %d/100 - ALTO RISCO DE FRAUDE", scoreAtual);
                
                logger.error("üö´ TRANSA√á√ÉO BLOQUEADA - RISCO CR√çTICO!");
                logger.error("   üí• Score cr√≠tico: {}/100", scoreAtual);
                logger.error("   üí∞ Valor bloqueado: R$ {}", valor);
                
                resultado.put("acao", "BLOQUEAR");
                resultado.put("permitirTransacao", false);
                
            // =============================================
            // ‚ö†Ô∏è RISCO ALTO (Score ‚â§ 50) - MARCAR COMO SUSPEITA
            // =============================================    
            } else if (scoreAtual <= SCORE_ALTO) {
                transacaoSuspeita = true;
                motivoBloqueio = String.format(
                    "SCORE BAIXO DETECTADO: %d/100 - TRANSA√á√ÉO SUSPEITA", scoreAtual);
                
                logger.warn("‚ö†Ô∏è TRANSA√á√ÉO SUSPEITA - RISCO ALTO!");
                logger.warn("   üìâ Score baixo: {}/100", scoreAtual);
                logger.warn("   üéØ Valor suspeito: R$ {}", valor);
                
                resultado.put("acao", "SUSPENDER");
                resultado.put("permitirTransacao", false);
                
            // =============================================
            // üìä RISCO M√âDIO (Score ‚â§ 70) - MONITORAMENTO ESPECIAL
            // =============================================
            } else if (scoreAtual <= SCORE_MEDIO) {
                requerAprovacao = true;
                
                logger.info("üìä TRANSA√á√ÉO MONITORADA - RISCO M√âDIO");
                logger.info("   üìà Score m√©dio: {}/100", scoreAtual);
                logger.info("   üîç Requer monitoramento especial");
                
                // Para valores muito altos com score m√©dio, requerer aprova√ß√£o
                if (valor.compareTo(new BigDecimal("1000")) > 0) {
                    resultado.put("acao", "APROVAR_MANUAL");
                    resultado.put("permitirTransacao", false);
                } else {
                    resultado.put("acao", "MONITORAR");
                    resultado.put("permitirTransacao", true);
                }
                
            // =============================================
            // ‚úÖ RISCO BAIXO (Score > 70) - APROVAR
            // =============================================
            } else {
                logger.info("‚úÖ TRANSA√á√ÉO APROVADA - BAIXO RISCO!");
                logger.info("   üìà Score excelente: {}/100", scoreAtual);
                
                resultado.put("acao", "APROVAR");
                resultado.put("permitirTransacao", true);
            }
            
            // =============================================
            // MONTAR RESPOSTA DETALHADA
            // =============================================
            
            resultado.put("sucesso", true);
            resultado.put("scoreAtual", scoreAtual);
            resultado.put("nivelRisco", nivelRisco);
            resultado.put("transacaoBloqueada", transacaoBloqueada);
            resultado.put("transacaoSuspeita", transacaoSuspeita);
            resultado.put("requerAprovacao", requerAprovacao);
            resultado.put("motivoBloqueio", motivoBloqueio);
            
            // Informa√ß√µes para a interface
            resultado.put("cliente", Map.of(
                "nome", contaOrigem.getCliente().getNomeCompleto(),
                "cpf", contaOrigem.getCliente().getCpf(),
                "conta", contaOrigem.getContaCompleta()
            ));
            
            resultado.put("transacao", Map.of(
                "valor", valor.toString(),
                "chavePix", chavePix,
                "descricao", descricao
            ));
            
            // Fatores de risco identificados
            resultado.put("fatoresRisco", gerarFatoresRisco(scoreAtual, valor));
            
            // Recomenda√ß√µes
            resultado.put("recomendacoes", gerarRecomendacoes(scoreAtual, valor, transacaoBloqueada));
            
            logger.info("‚úÖ An√°lise pr√©-transa√ß√£o conclu√≠da:");
            logger.info("   üéØ A√ß√£o recomendada: {}", resultado.get("acao"));
            logger.info("   ‚úîÔ∏è Permitir transa√ß√£o: {}", resultado.get("permitirTransacao"));
            
            return ResponseEntity.ok(resultado);
            
        } catch (Exception e) {
            logger.error("‚ùå Erro na an√°lise pr√©-transa√ß√£o: {}", e.getMessage(), e);
            
            resultado.put("sucesso", false);
            resultado.put("erro", "Erro interno na an√°lise: " + e.getMessage());
            resultado.put("acao", "BLOQUEAR");
            resultado.put("permitirTransacao", false);
            resultado.put("motivoBloqueio", "Erro t√©cnico - transa√ß√£o bloqueada por seguran√ßa");
            
            return ResponseEntity.status(500).body(resultado);
        }
    }
    
    /**
     * Processa a transa√ß√£o PIX (apenas se passou na an√°lise pr√©via)
     */
    @PostMapping("/processar")
    public ResponseEntity<Map<String, Object>> processarPix(@RequestBody Map<String, Object> dadosTransacao) {
        Map<String, Object> resultado = new HashMap<>();
        
        try {
            logger.info("üí≥ PROCESSANDO TRANSA√á√ÉO PIX");
            
            Long contaOrigemId = Long.parseLong((String) dadosTransacao.get("contaOrigemId"));
            Long contaDestinoId = Long.parseLong((String) dadosTransacao.get("contaDestinoId"));
            BigDecimal valor = new BigDecimal((String) dadosTransacao.get("valor"));
            String descricao = (String) dadosTransacao.getOrDefault("descricao", "");
            
            // Chamar o servi√ßo que j√° tem toda a l√≥gica implementada
            TransacaoPix transacao = bancoDadosService.realizarTransacaoPix(
                contaOrigemId, contaDestinoId, valor, descricao);
            
            resultado.put("sucesso", true);
            resultado.put("transacaoId", transacao.getId());
            resultado.put("status", transacao.getStatusTransacao().toString());
            resultado.put("valor", transacao.getValor().toString());
            resultado.put("dataHora", transacao.getDataTransacao());
            resultado.put("score", transacao.getScoreConfianca());
            
            if (transacao.getStatusTransacao() == TransacaoPix.StatusTransacao.BLOQUEADA) {
                resultado.put("motivo", "Transa√ß√£o bloqueada por score de risco cr√≠tico");
                
                // Buscar protocolo da den√∫ncia autom√°tica criada
                try {
                    String protocoloDenuncia = bancoDadosService.obterProtocoloDenunciaAutomatica(transacao.getId());
                    if (protocoloDenuncia != null) {
                        resultado.put("protocoloDenuncia", protocoloDenuncia);
                        logger.info("üìã Protocolo da den√∫ncia autom√°tica: {}", protocoloDenuncia);
                    }
                } catch (Exception e) {
                    logger.warn("‚ö†Ô∏è N√£o foi poss√≠vel obter protocolo da den√∫ncia: {}", e.getMessage());
                }
                
            } else if (transacao.getStatusTransacao() == TransacaoPix.StatusTransacao.SUSPEITA) {
                resultado.put("motivo", "Transa√ß√£o marcada como suspeita para an√°lise");
            }
            
            logger.info("üí≥ Transa√ß√£o processada: ID={}, Status={}", 
                       transacao.getId(), transacao.getStatusTransacao());
            
            return ResponseEntity.ok(resultado);
            
        } catch (Exception e) {
            logger.error("‚ùå Erro ao processar PIX: {}", e.getMessage(), e);
            
            resultado.put("sucesso", false);
            resultado.put("erro", "Erro ao processar transa√ß√£o: " + e.getMessage());
            
            return ResponseEntity.status(500).body(resultado);
        }
    }
    
    // =============================================
    // M√âTODOS AUXILIARES
    // =============================================
    
    private String determinarNivelRisco(Integer score) {
        if (score <= 30) return "üî¥ CR√çTICO";
        if (score <= 50) return "üü† ALTO";
        if (score <= 70) return "üü° M√âDIO";
        return "üü¢ BAIXO";
    }
    
    private java.util.List<String> gerarFatoresRisco(Integer score, BigDecimal valor) {
        java.util.List<String> fatores = new java.util.ArrayList<>();
        
        if (score <= 30) {
            fatores.add("Score extremamente baixo (" + score + "/100)");
            fatores.add("Alto hist√≥rico de den√∫ncias");
            fatores.add("Comportamento suspeito detectado");
        } else if (score <= 50) {
            fatores.add("Score baixo (" + score + "/100)");
            fatores.add("Presen√ßa de den√∫ncias recentes");
        } else if (score <= 70) {
            fatores.add("Score m√©dio (" + score + "/100)");
            fatores.add("Conta em monitoramento");
        }
        
        if (valor.compareTo(new BigDecimal("1000")) > 0) {
            fatores.add("Valor elevado da transa√ß√£o (R$ " + valor + ")");
        }
        
        if (fatores.isEmpty()) {
            fatores.add("Nenhum fator de risco identificado");
        }
        
        return fatores;
    }
    
    private java.util.List<String> gerarRecomendacoes(Integer score, BigDecimal valor, boolean bloqueada) {
        java.util.List<String> recomendacoes = new java.util.ArrayList<>();
        
        if (bloqueada) {
            recomendacoes.add("üö´ Transa√ß√£o BLOQUEADA por seguran√ßa");
            recomendacoes.add("üìû Entre em contato com a central de atendimento");
            recomendacoes.add("üîç An√°lise manual necess√°ria");
        } else if (score <= 50) {
            recomendacoes.add("‚ö†Ô∏è Transa√ß√£o em an√°lise pela equipe de seguran√ßa");
            recomendacoes.add("‚è±Ô∏è Processamento pode demorar at√© 24h");
        } else if (score <= 70) {
            recomendacoes.add("üìä Transa√ß√£o em monitoramento especial");
            recomendacoes.add("‚úÖ Processamento normal esperado");
        } else {
            recomendacoes.add("‚úÖ Transa√ß√£o aprovada - baixo risco");
            recomendacoes.add("‚ö° Processamento imediato");
        }
        
        return recomendacoes;
    }
} 