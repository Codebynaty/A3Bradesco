package com.bradesco.pixmonitor.model;

/**
 * Enum que define os tipos de golpes mais comuns no PIX
 * Cada tipo possui c√≥digo, nome, descri√ß√£o, categoria e severidade
 */
public enum TipoGolpe {
    
    // === GOLPES DE RELACIONAMENTO ===
    FALSO_SEQUESTRO("SEQ001", "Falso Sequestro", 
        "Criminoso se passa por sequestrador e exige transfer√™ncia PIX como 'resgate'", 
        CategoriaGolpe.RELACIONAMENTO, SeveridadeGolpe.CRITICA),
    
    GOLPE_DO_PARENTE("PAR001", "Golpe do Parente", 
        "Criminoso se passa por familiar em emerg√™ncia pedindo dinheiro via PIX", 
        CategoriaGolpe.RELACIONAMENTO, SeveridadeGolpe.ALTA),
    
    GOLPE_DO_NAMORADO_VIRTUAL("NAM001", "Namorado Virtual", 
        "Relacionamento falso criado para solicitar transfer√™ncias PIX", 
        CategoriaGolpe.RELACIONAMENTO, SeveridadeGolpe.MEDIA),
    
    CHANTAGEEM_INTIMA("CHA001", "Chantagem √çntima", 
        "Chantagem com conte√∫do √≠ntimo exigindo pagamento via PIX", 
        CategoriaGolpe.RELACIONAMENTO, SeveridadeGolpe.CRITICA),
    
    // === GOLPES FINANCEIROS ===
    INVESTIMENTO_FALSO("INV001", "Investimento Falso", 
        "Promessa de investimento com altos retornos usando PIX como meio de pagamento", 
        CategoriaGolpe.FINANCEIRO, SeveridadeGolpe.ALTA),
    
    CASA_DE_APOSTAS("APO001", "Casa de Apostas Falsa", 
        "Plataforma de apostas fraudulenta que n√£o permite saques", 
        CategoriaGolpe.FINANCEIRO, SeveridadeGolpe.ALTA),
    
    EMPRESTIMO_FALSO("EMP001", "Empr√©stimo Falso", 
        "Oferta de empr√©stimo que exige PIX como 'taxa' ou 'garantia'", 
        CategoriaGolpe.FINANCEIRO, SeveridadeGolpe.MEDIA),
    
    CARTAO_CREDITO_FALSO("CAR001", "Cart√£o de Cr√©dito Falso", 
        "Oferta de cart√£o que exige PIX como taxa de ades√£o", 
        CategoriaGolpe.FINANCEIRO, SeveridadeGolpe.MEDIA),
    
    CONSORCIO_FALSO("CON001", "Cons√≥rcio Falso", 
        "Oferta de cons√≥rcio contemplado mediante PIX", 
        CategoriaGolpe.FINANCEIRO, SeveridadeGolpe.MEDIA),
    
    // === GOLPES DE IDENTIDADE ===
    PESSOA_FAMOSA("FAM001", "Pessoa Famosa", 
        "Criminoso se passa por celebridade ou influencer", 
        CategoriaGolpe.IDENTIDADE, SeveridadeGolpe.MEDIA),
    
    FUNCIONARIO_BANCO("BAN001", "Falso Funcion√°rio do Banco", 
        "Criminoso se passa por funcion√°rio do banco solicitando PIX", 
        CategoriaGolpe.IDENTIDADE, SeveridadeGolpe.ALTA),
    
    FUNCIONARIO_GOVERNO("GOV001", "Falso Funcion√°rio do Governo", 
        "Criminoso se passa por funcion√°rio p√∫blico exigindo pagamento", 
        CategoriaGolpe.IDENTIDADE, SeveridadeGolpe.ALTA),
    
    ADVOGADO_FALSO("ADV001", "Advogado Falso", 
        "Criminoso se passa por advogado cobrando honor√°rios via PIX", 
        CategoriaGolpe.IDENTIDADE, SeveridadeGolpe.MEDIA),
    
    // === GOLPES DE COMPRA E VENDA ===
    VENDA_FALSA("VEN001", "Venda Falsa", 
        "Produto ou servi√ßo que n√£o existe, pagamento via PIX", 
        CategoriaGolpe.COMERCIAL, SeveridadeGolpe.MEDIA),
    
    ENTREGA_FALSA("ENT001", "Entrega Falsa", 
        "Falso entregador cobrando taxa extra via PIX", 
        CategoriaGolpe.COMERCIAL, SeveridadeGolpe.BAIXA),
    
    MARKETPLACE_FALSO("MAR001", "Marketplace Falso", 
        "Loja online fraudulenta que aceita apenas PIX", 
        CategoriaGolpe.COMERCIAL, SeveridadeGolpe.MEDIA),
    
    ALUGUEL_FALSO("ALU001", "Aluguel Falso", 
        "Oferta de im√≥vel para loca√ß√£o mediante dep√≥sito PIX", 
        CategoriaGolpe.COMERCIAL, SeveridadeGolpe.MEDIA),
    
    // === GOLPES TECNOL√ìGICOS ===
    PHISHING_PIX("PHI001", "Phishing PIX", 
        "Link falso que captura dados banc√°rios para PIX", 
        CategoriaGolpe.TECNOLOGICO, SeveridadeGolpe.ALTA),
    
    CLONAGEM_WHATSAPP("WHT001", "Clonagem WhatsApp", 
        "WhatsApp clonado usado para solicitar PIX a contatos", 
        CategoriaGolpe.TECNOLOGICO, SeveridadeGolpe.ALTA),
    
    APP_FALSO("APP001", "App Falso", 
        "Aplicativo fraudulento que solicita transfer√™ncias PIX", 
        CategoriaGolpe.TECNOLOGICO, SeveridadeGolpe.ALTA),
    
    QR_CODE_FALSO("QRC001", "QR Code Malicioso", 
        "QR Code que direciona para transfer√™ncia PIX fraudulenta", 
        CategoriaGolpe.TECNOLOGICO, SeveridadeGolpe.MEDIA),
    
    // === GOLPES DE SORTEIO E PR√äMIO ===
    SORTEIO_FALSO("SOR001", "Sorteio Falso", 
        "Falso sorteio que exige PIX como 'taxa' para receber pr√™mio", 
        CategoriaGolpe.PREMIO, SeveridadeGolpe.MEDIA),
    
    PREMIO_FALSO("PRE001", "Pr√™mio Falso", 
        "Notifica√ß√£o de pr√™mio que exige PIX para libera√ß√£o", 
        CategoriaGolpe.PREMIO, SeveridadeGolpe.MEDIA),
    
    RIFA_FALSA("RIF001", "Rifa Falsa", 
        "Rifa inexistente com pagamento apenas via PIX", 
        CategoriaGolpe.PREMIO, SeveridadeGolpe.BAIXA),
    
    // === GOLPES ESPEC√çFICOS ===
    AUXILIO_EMERGENCIAL("AUX001", "Aux√≠lio Emergencial Falso", 
        "Oferta de aux√≠lio governamental mediante PIX", 
        CategoriaGolpe.GOVERNO, SeveridadeGolpe.ALTA),
    
    MULTA_FALSA("MUL001", "Multa Falsa", 
        "Cobran√ßa de multa inexistente via PIX", 
        CategoriaGolpe.GOVERNO, SeveridadeGolpe.MEDIA),
    
    DOACAO_FALSA("DOA001", "Doa√ß√£o Falsa", 
        "Solicita√ß√£o de doa√ß√£o para causa inexistente", 
        CategoriaGolpe.SOCIAL, SeveridadeGolpe.BAIXA),
    
    // === OUTROS ===
    OUTROS("OUT001", "Outros", 
        "Tipo de golpe n√£o categorizado nas op√ß√µes anteriores", 
        CategoriaGolpe.OUTROS, SeveridadeGolpe.MEDIA);

    private final String codigo;
    private final String nome;
    private final String descricao;
    private final CategoriaGolpe categoria;
    private final SeveridadeGolpe severidade;

    TipoGolpe(String codigo, String nome, String descricao, 
              CategoriaGolpe categoria, SeveridadeGolpe severidade) {
        this.codigo = codigo;
        this.nome = nome;
        this.descricao = descricao;
        this.categoria = categoria;
        this.severidade = severidade;
    }

    // Getters
    public String getCodigo() { return codigo; }
    public String getNome() { return nome; }
    public String getDescricao() { return descricao; }
    public CategoriaGolpe getCategoria() { return categoria; }
    public SeveridadeGolpe getSeveridade() { return severidade; }

    /**
     * Retorna o emoji correspondente ao tipo de golpe
     */
    public String getEmoji() {
        return switch (this.categoria) {
            case RELACIONAMENTO -> "üíî";
            case FINANCEIRO -> "üí∞";
            case IDENTIDADE -> "üé≠";
            case COMERCIAL -> "üõçÔ∏è";
            case TECNOLOGICO -> "üíª";
            case PREMIO -> "üéÅ";
            case GOVERNO -> "üèõÔ∏è";
            case SOCIAL -> "ü§ù";
            case OUTROS -> "‚ùì";
        };
    }

    /**
     * Retorna a cor CSS correspondente √† severidade
     */
    public String getCorSeveridade() {
        return switch (this.severidade) {
            case CRITICA -> "#dc3545"; // Vermelho
            case ALTA -> "#fd7e14";     // Laranja
            case MEDIA -> "#ffc107";    // Amarelo
            case BAIXA -> "#28a745";    // Verde
        };
    }

    /**
     * Busca tipo de golpe por c√≥digo
     */
    public static TipoGolpe porCodigo(String codigo) {
        for (TipoGolpe tipo : values()) {
            if (tipo.getCodigo().equals(codigo)) {
                return tipo;
            }
        }
        return OUTROS;
    }

    /**
     * Enum para categorias de golpes
     */
    public enum CategoriaGolpe {
        RELACIONAMENTO("Relacionamento"),
        FINANCEIRO("Financeiro"),
        IDENTIDADE("Identidade"),
        COMERCIAL("Comercial"),
        TECNOLOGICO("Tecnol√≥gico"),
        PREMIO("Pr√™mio/Sorteio"),
        GOVERNO("Governo"),
        SOCIAL("Social"),
        OUTROS("Outros");

        private final String nome;

        CategoriaGolpe(String nome) {
            this.nome = nome;
        }

        public String getNome() { return nome; }
    }

    /**
     * Enum para severidade dos golpes
     */
    public enum SeveridadeGolpe {
        CRITICA("Cr√≠tica", 4),
        ALTA("Alta", 3),
        MEDIA("M√©dia", 2),
        BAIXA("Baixa", 1);

        private final String nome;
        private final int nivel;

        SeveridadeGolpe(String nome, int nivel) {
            this.nome = nome;
            this.nivel = nivel;
        }

        public String getNome() { return nome; }
        public int getNivel() { return nivel; }
    }
} 